name: Pyramid_m2
root_dir: "dataset/OPV2V/train"
validate_dir: "dataset/OPV2V/validate"
test_dir: "dataset/OPV2V/test"

yaml_parsers: 
  m2:
    "load_general_params"
train_params:
  batch_size: &batch_size 1
  epoches: 30
  eval_freq: 2
  save_freq: 2
  max_cav: 5

comm_range: 70
input_source: ['lidar']
label_type: 'lidar'
cav_lidar_range: &cav_lidar [-102.4, -51.2, -3, 102.4, 51.2, 1] 


heter:
  assignment_path: "opencood/logs/heter_modality_assign/opv2v_4modality.json" 
  ego_modality: &ego_modality "m2"
  mapping_dict:
    m1: m2
    m2: m2
    m3: m2
    m4: m2
  modality_setting:
    m2:
      sensor_type: &sensor_type_m2 'lidar'
      core_method: &core_method_m2 "second"

      # lidar requires preprocess
      preprocess:
        # options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
        core_method: 'SpVoxelPreprocessor'
        args:
          voxel_size: &voxel_size_m2 [0.1, 0.1, 0.1]
          max_points_per_voxel: 5
          max_voxel_train: 32000
          max_voxel_test: 70000
        # lidar range for each individual cav.
        cav_lidar_range: &cav_lidar_m2 [-102.4, -51.2, -3, 102.4, 51.2, 1]
      postprocess:
        core_method: 'VoxelPostprocessor' # VoxelPostprocessor, BevPostprocessor supported
        gt_range: *cav_lidar
        voxel_size: &voxel_size [0.4, 0.4, 4]
        anchor_args:
          cav_lidar_range: *cav_lidar
          l: 3.9
          w: 1.6
          h: 1.56
          r: &anchor_yaw [0, 90]
          feature_stride: 2
          num: &anchor_num 2
        target_args:
          pos_threshold: 0.6
          neg_threshold: 0.45
          score_threshold: 0.2
        order: 'hwl' # hwl or lwh
        max_num: 150 # maximum number of objects in a single frame. use this number to make sure different frames has the same dimension in the same batch
        nms_thresh: 0.15
        dir_args: &dir_args
          dir_offset: 0.7853
          num_bins: 2
          anchor_yaw: *anchor_yaw

fusion:
  core_method: 'intermediateheter'
  dataset: 'opv2v'
  args: 
    proj_first: false
    grid_conf: None # place-holder
    data_aug_conf: None # place-holder

# model related
model:
  core_method: homo_collab
  args:
    supervise_single: true
    m2:
      core_method: *core_method_m2
      sensor_type: *sensor_type_m2
      lidar_range: *cav_lidar_m2

      encoder_args:
        voxel_size: *voxel_size_m2
        lidar_range: *cav_lidar_m2
        mean_vfe:
          num_point_features: 4
        spconv:
          num_features_in: 4
          num_features_out: 64
        map2bev:
          feature_num: 128

      backbone_args:
        layer_nums: [3]
        layer_strides: [1] # Note here for Second, this is set to be 1 not 2.
        num_filters: [64]
        inplanes: 128
  
      aligner_args:
        core_method: identity

      fusion_method: pyramid 

      fusion_backbone: 
        resnext: true
        layer_nums: [3, 5, 8]
        layer_strides: [1, 2, 2]
        num_filters: [64, 128, 256]
        upsample_strides: [1, 2, 4]
        num_upsample_filter: [128, 128, 128]
        anchor_number: *anchor_num

      shrink_header: 
        kernal_size: [ 3 ]
        stride: [ 1 ]
        padding: [ 1 ]
        dim: [ 256 ]
        input_dim: 384 # 128 * 3

      in_head: 256
      anchor_number: *anchor_num
      dir_args: *dir_args


loss:
  core_method: point_pillar_pyramid_loss
  args:
    pos_cls_weight: 2.0
    cls:
      type: 'SigmoidFocalLoss'
      alpha: 0.25
      gamma: 2.0
      weight: 1.0
    reg:
      type: 'WeightedSmoothL1Loss'
      sigma: 3.0
      codewise: true
      weight: 2.0
    dir:
      type: 'WeightedSoftmaxClassificationLoss'
      weight: 0.2
      args: *dir_args
    depth:
      weight: 1.0
    pyramid:
      relative_downsample: [1, 2, 4]
      weight: [0.4, 0.2, 0.1]


optimizer:
  core_method: Adam
  lr: 0.002
  args:
    eps: 1e-10
    weight_decay: 1e-4

lr_scheduler:
  core_method: multistep #step, multistep and Exponential support
  gamma: 0.1
  step_size: [15, 25]

