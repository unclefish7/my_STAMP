name: m1_CoBevT_both_OPV2V
# root_dir: "dataset/OPV2V/train"
# validate_dir: "dataset/OPV2V/validate"
# test_dir: "dataset/OPV2V/test"

root_dir: "dataset/mydataset_OPV2V_newBEV/train"
validate_dir: "dataset/mydataset_OPV2V_newBEV/validate"
test_dir: "dataset/mydataset_OPV2V_newBEV/test"

yaml_parsers: 
  m1:
    "load_rgb_params"

train_params:
  batch_size: &batch_size 1
  epoches: &epoches 20
  eval_freq: 100
  save_freq: 1
  max_cav: &max_cav 4

comm_range: 70
input_source: &input_source ['lidar']
label_type: 'lidar'
cav_lidar_range: &cav_lidar [-51.2, -51.2, -2, 51.2, 51.2, 2]

add_data_extension: ['bev_dynamic.png', 'bev_static.png', 'bev_lane.png', 'bev_visibility.png', 'bev_visibility_corp.png']

heter:
  assignment_path: "opencood/logs/heter_modality_assign/opv2v_4modality.json" 
  ego_modality: &ego_modality "m1"
  mapping_dict:
    m1: m1
    m2: m1
    m3: m1
    m4: m1
  modality_setting:
    m1:
      sensor_type: &sensor_type 'lidar'
      core_method: &core_method "point_pillar"

      # lidar requires preprocess
      preprocess:
        # options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
        core_method: 'SpVoxelPreprocessor'
        args:
          voxel_size: &voxel_size [0.4, 0.4, 4]
          max_points_per_voxel: 32
          max_voxel_train: 32000
          max_voxel_test: 70000
        # lidar range for each individual cav.
        cav_lidar_range: *cav_lidar

      postprocess:
        core_method: 'CameraBevPostprocessor' # VoxelPostprocessor, BevPostprocessor supported
        gt_range: *cav_lidar
        anchor_args:
          cav_lidar_range: *cav_lidar
        order: 'hwl' # hwl or lwh
        max_num: 100 # maximum number of objects in a single frame. use this number to make sure different frames has the same dimension in the same batch
        nms_thresh: 0.15

fusion:
  core_method: 'intermediateheter'
  dataset: 'opv2v'
  args: 
    proj_first: false
    grid_conf: None # place-holder
    data_aug_conf: None # place-holder

# model related
model:
  core_method: homo_collab
  args:
    supervise_single: false
    m1:
      target: &target both # dynamic, static, both
      core_method: *core_method
      sensor_type: *sensor_type
      lidar_range: *cav_lidar

      encoder_args:
        voxel_size: *voxel_size
        lidar_range: *cav_lidar
        pillar_vfe:
          use_norm: true
          with_distance: false
          use_absolute_xyz: true
          num_filters: [64]
        point_pillar_scatter:
          num_features: 64

      backbone_args:
        layer_nums: [3]
        layer_strides: [2]
        num_filters: [64]
  
      aligner_args:
        core_method: identity

      fusion_method: pyramid 

      fusion_backbone: 
        resnext: true
        layer_nums: [3, 5, 8]
        layer_strides: [1, 2, 2]
        num_filters: [64, 128, 256]
        upsample_strides: [1, 2, 4]
        num_upsample_filter: [128, 128, 128]

      shrink_header: 
        kernal_size: [ 3 ]
        stride: [ 1 ]
        padding: [ 1 ]
        dim: [ 256 ]
        input_dim: 384 # 128 * 3

      head_method: 'bev_seg_head'

      decoder_args:
        input_dim: 256
        num_layer: 1
        num_ch_dec: &decoder_block [256]

      seg_head_dim: 256
      output_class_dynamic: 2
      output_class_static: 3


task:
  m1:
    "segmentation"

loss:
  core_method: vanilla_seg_loss
  args:
    target: *target
    d_weights: 15.0
    s_weights: 2.0
    l_weights: 4.0
    d_coe: 2.0
    s_coe: 1.0



optimizer:
  core_method: Adam
  lr: 2e-3
  args:
    eps: 1e-10
    weight_decay: 1e-2

# lr_scheduler:
#   core_method: cosineannealwarm #step, multistep, Exponential and cosineannealwarm support
#   epoches: *epoches
#   warmup_lr: 2e-5
#   warmup_epoches: 10
#   lr_min: 5e-6

lr_scheduler:
  core_method: multistep #step, multistep and Exponential support
  gamma: 0.1
  step_size: [15, 25]



